Pathfinding TODOs:

Pikachu-class (walk + jump):
- Penalize paths that go through water
- Optimization: cache tile-type checks (required for multi-tile entities)
- Fix bugs in hasDirectPath computation
- Fix bug: we may need to jump in the x direction even if abs(dx) === 1, etc.
  - We should save the "needs jump" bit when we compute the path, and use it when following the path
- Leave a buffer around the player when following
  - We must intelligently select a point near the player to path to, instead
  - (Going from non-zero acceleration to zero and back results in jerky follower movement)
- Try to de-dupe diagonal and direct jumps without losing optimizations
  - We can do this by building a "jump trie"
- Use dynamic programming to shorten paths
  - The "hasDirectPath" check should pass if every step on the path is a height drop
- When in the air, path from the landing site
  - Combined with the DP check above, we can more intelligently merge jumps
  - Similarly, if we're grounded but our center is not, adjust the source

Other classes:
- Multi-grid-cell entities
- Entities that can break some cell types
- Diggers (move through ground-type cells)
- Swimmers (walk, jump, and water-surface)
- Divers (move through fluids)
- Levitate (move through air cells)
- Flyers ("jump" through air cells - constant motion?)
- Phasing (levitate + move through solid cells?)
- Combinations of the above attributes

It may be that digging, swimming, and levitatation are the same ability just
applied to different types of cells.
